{"version":3,"sources":["index.js"],"names":["p","c","_TextAliveApp","TextAliveApp","Player","phraseEl","document","querySelector","countPhrase","countChar","calculateGridSize","rows","screenWidth","window","innerWidth","screenHeight","innerHeight","aspectRatio","columns","Math","floor","min","targetRows","max","round","generateGrid","gridSize","gridContainer","getElementById","innerHTML","style","gridTemplateColumns","concat","gridTemplateRows","row","column","square","createElement","classList","add","squareId","id","appendChild","onload","onresize","animateWord","now","unit","contains","textContent","text","player","app","token","appAuthor","appName","mediaElement","placePhraseDiv","contents","$","append","placeChar","addListener","onAppReady","managed","createFromSongUrl","video","beatId","chordId","repetitiveSegmentId","lyricId","lyricDiffId","onPause","isPaused","onTimeUpdate","position","currentPhrase","firstPhrase","currentChar","firstChar","console","log","startTime","animate","next","onTimerReady","click","isPlaying","requestPause","html","requestPlay"],"mappings":";AAAA,IAGIA,EAAGC,EAHPC,EAAmBC,aAAXC,EAAMF,EAANE,OAEFC,EAAWC,SAASC,cAAc,aAEpCC,EAAc,EAChBC,EAAY,EAGd,SAASC,IAEP,IAcIC,EAdAC,EAAcC,OAAOC,WACrBC,EAAeF,OAAOG,YAGtBC,EAAcL,EAAcG,EAO5BG,EAAUC,KAAKC,MAAMR,EAAc,KAIvC,GAAIK,EAAc,EAEhBN,EAAOQ,KAAKE,IATA,GASaF,KAAKC,MAAMF,EAAUD,SACzC,GAAIA,EAAc,EAEvBN,EAbY,MAcP,CAEL,IAAIW,EAAaH,KAAKE,IAfV,GAeuBF,KAAKC,MAAMF,EAAUD,IACxDN,EAAOQ,KAAKI,IAjBA,EAmBVJ,KAAKK,MAAMF,GAAcV,EAAcG,KAK3C,MAAO,CAAEG,QAASA,EAASP,KAAMA,GAInC,SAASc,IACP,IAAIC,EAAWhB,IAEXiB,EAAgBrB,SAASsB,eAAe,kBAE5CD,EAAcE,UAAY,GAE1BF,EAAcG,MAAMC,oBAAmBC,UAAAA,OAAaN,EAASR,QAAe,UAC5ES,EAAcG,MAAMG,iBAAgBD,UAAAA,OAAaN,EAASf,KAAY,UAEtE,IAAK,IAAIuB,EAAM,EAAGA,GAAOR,EAASf,KAAMuB,IACtC,IAAK,IAAIC,EAAS,EAAGA,GAAUT,EAASR,QAASiB,IAAU,CACzD,IAAIC,EAAS9B,SAAS+B,cAAc,OACpCD,EAAOE,UAAUC,IAAI,UACrB,IAAIC,EAAW,MAAQN,EAAMC,EAC7BC,EAAOK,GAAKD,EACZb,EAAce,YAAYN,IA0ChCvB,OAAO8B,OAASlB,EAGhBZ,OAAO+B,SAAWnB,EAGlB,IAAMoB,EAAc,SAAUC,EAAKC,GAC7BA,EAAKC,SAASF,KAChBxC,SAASC,cAAc,SAAS0C,YAAcF,EAAKG,OAKjDC,EAAS,IAAI/C,EAAO,CACxBgD,IAAK,CAAEC,MAAO,oBACdC,UAAW,YACXC,QAAS,WACTC,aAAclD,SAASC,cAAc,YAuEvC,SAASkD,IACP,IAAIC,EAAW,mBAAqBlD,EAAc,GAAK,KACvDkD,GAAY,cACZC,EAAE,aAAaC,OAAOF,GAExB,SAASG,IAEPF,EADiB,UAAYnD,GACjBoD,OAAO3D,EAAEiD,MA3EvBC,EAAOW,YAAY,CACjBC,WAAY,SAACX,GACNA,EAAIY,SACPb,EAAOc,kBAAkB,8CAA+C,CACtEC,MAAO,CAELC,OAAQ,QACRC,QAAS,MACTC,oBAAqB,QAErBC,QAAS,MACTC,YAAa,UAKrBC,QAAS,WAEPC,UAAW,GAEbC,aAAc,SAACC,GACb,IAAIC,EAAgB5E,GAAKmD,EAAOe,MAAMW,YAClCC,EAAc7E,GAAKkD,EAAOe,MAAMa,UAGpC,IAFAC,QAAQC,IAAI,eAAgBN,EAAU,OAE/BC,GAAiBA,EAAcM,UAAYP,EAAW,KACvD3E,IAAM4E,IACR5E,EAAI4E,EACJA,EAAcO,QAAU1B,IACxBjD,KAEFoE,EAAgBA,EAAcQ,KAEhC,KAAON,GAAeA,EAAYI,UAAYP,EAAW,KACnD1E,IAAM6E,IACR7E,EAAI6E,EACJA,EAAYK,QAAUtB,IACtBmB,QAAQC,IAAI,cAAgBH,EAAc,IAAMrE,EAAY,IAAMR,GAClEQ,KAEFqE,EAAcA,EAAYM,MAI9BC,aAAc,eAGhB1B,EAAE,SAAS2B,MAAM,WAEXnC,IACEA,EAAOoC,WACTpC,EAAOqC,eACP7B,EAAE,SAAS8B,KAAK,UAGhBtC,EAAOuC,cACP/B,EAAE,SAAS8B,KAAK","file":"src.4c5c30ba.js","sourceRoot":"..\\src","sourcesContent":["const { Player } = TextAliveApp;\r\n\r\nconst phraseEl = document.querySelector(\"#contents\");\r\nlet p, c;\r\nlet countPhrase = 0,\r\n  countChar = 0;\r\n\r\n// Function to calculate the number of grid columns and rows based on screen size and orientation\r\nfunction calculateGridSize() {\r\n  // Get the screen width and height\r\n  var screenWidth = window.innerWidth;\r\n  var screenHeight = window.innerHeight;\r\n\r\n  // Calculate the aspect ratio of the screen\r\n  var aspectRatio = screenWidth / screenHeight;\r\n\r\n  // Define the minimum and maximum number of rows\r\n  var minRows = 4; // Minimum number of rows\r\n  var maxRows = 10; // Maximum number of rows\r\n\r\n  // Calculate the number of columns based on the screen width\r\n  var columns = Math.floor(screenWidth / 100); // Adjust the size of each square as needed\r\n\r\n  // Calculate the number of rows based on the screen orientation\r\n  var rows;\r\n  if (aspectRatio < 1) {\r\n    // Vertical (portrait) orientation\r\n    rows = Math.min(maxRows, Math.floor(columns / aspectRatio));\r\n  } else if (aspectRatio > 1) {\r\n    // Horizontal (landscape) orientation\r\n    rows = minRows;\r\n  } else {\r\n    // Square screen\r\n    var targetRows = Math.min(maxRows, Math.floor(columns / aspectRatio));\r\n    rows = Math.max(\r\n      minRows,\r\n      Math.round(targetRows * (screenWidth / screenHeight))\r\n    );\r\n  }\r\n\r\n  // Return the grid size\r\n  return { columns: columns, rows: rows };\r\n}\r\n\r\n// Function to generate the grid with dynamic number of columns and rows\r\nfunction generateGrid() {\r\n  var gridSize = calculateGridSize();\r\n\r\n  var gridContainer = document.getElementById(\"grid-container\");\r\n\r\n  gridContainer.innerHTML = \"\";\r\n\r\n  gridContainer.style.gridTemplateColumns = `repeat(${gridSize.columns}, 1fr)`;\r\n  gridContainer.style.gridTemplateRows = `repeat(${gridSize.rows}, 1fr)`;\r\n\r\n  for (var row = 1; row <= gridSize.rows; row++) {\r\n    for (var column = 1; column <= gridSize.columns; column++) {\r\n      var square = document.createElement(\"div\");\r\n      square.classList.add(\"square\");\r\n      var squareId = \"div\" + row + column;\r\n      square.id = squareId;\r\n      gridContainer.appendChild(square);\r\n    }\r\n  }\r\n}\r\n\r\n// // Function to generate the grid\r\n// function generateGrid() {\r\n//   // Get the width and height of the viewport\r\n//   var screenWidth = window.innerWidth;\r\n//   var screenHeight = window.innerHeight;\r\n\r\n//   // Calculate the number of rows and columns based on the screen size\r\n//   var numColumns = Math.floor(screenWidth / 100); // Adjust the size of each square as needed\r\n//   var numRows = Math.floor(screenHeight / 100); // Adjust the size of each square as needed\r\n\r\n//   // Get the grid container\r\n//   var gridContainer = document.getElementById(\"grid-container\");\r\n\r\n//   // Clear the grid container\r\n//   gridContainer.innerHTML = \"\";\r\n\r\n//   // Loop through rows and columns to create squares with unique IDs\r\n//   for (var y = 1; y <= numRows; y++) {\r\n//     for (var x = 1; x <= numColumns; x++) {\r\n//       // Create a new div element\r\n//       var square = document.createElement(\"div\");\r\n\r\n//       // Set the unique ID for the div\r\n//       square.id = \"div\" + String.fromCharCode(96 + y) + x; // Convert y to a letter (a, b, c, ...) using ASCII code\r\n\r\n//       //visualisation\r\n//       square.textContent = \"口\";\r\n//       // Add additional styling if needed\r\n//       square.classList.add(\"square\");\r\n\r\n//       // Append the square to the grid container\r\n//       gridContainer.appendChild(square);\r\n//     }\r\n//   }\r\n// }\r\n\r\n// Call the function to generate the grid when the page loads\r\nwindow.onload = generateGrid;\r\n\r\n// Call the function to regenerate the grid when the window is resized\r\nwindow.onresize = generateGrid;\r\n\r\n// 単語が発声されていたら #text に表示する\r\nconst animateWord = function (now, unit) {\r\n  if (unit.contains(now)) {\r\n    document.querySelector(\"#text\").textContent = unit.text;\r\n  }\r\n};\r\n\r\n// TextAlive Player を作る\r\nconst player = new Player({\r\n  app: { token: \"TzeB2jjekneT3Vpj\" },\r\n  appAuthor: \"Synthesis\",\r\n  appName: \"index.js\",\r\n  mediaElement: document.querySelector(\"#media\"),\r\n}); //where the media info will be placed });\r\n\r\nplayer.addListener({\r\n  onAppReady: (app) => {\r\n    if (!app.managed) {\r\n      player.createFromSongUrl(\"https://www.youtube.com/watch?v=xOKplMgHxxA\", {\r\n        video: {\r\n          // 音楽地図訂正履歴: https://songle.jp/songs/1688650/history\r\n          beatId: 4351165,\r\n          chordId: 10704,\r\n          repetitiveSegmentId: 2780814,\r\n          // 歌詞タイミング訂正履歴: https://textalive.jp/lyrics/www.youtube.com%2Fwatch%3Fv=a-Nf3QUFkOU\r\n          lyricId: 56749,\r\n          lyricDiffId: 13198,\r\n        },\r\n      });\r\n    }\r\n  },\r\n  onPause: () => {\r\n    //method to pause\r\n    isPaused = true;\r\n  },\r\n  onTimeUpdate: (position) => {\r\n    let currentPhrase = p || player.video.firstPhrase;\r\n    let currentChar = c || player.video.firstChar;\r\n    console.log(\"再生位置のアップデート:\", position, \"ミリ秒\");\r\n    // console.log(player.video.phrases);\r\n    while (currentPhrase && currentPhrase.startTime < position + 400) {\r\n      if (p !== currentPhrase) {\r\n        p = currentPhrase;\r\n        currentPhrase.animate = placePhraseDiv();\r\n        countPhrase++;\r\n      }\r\n      currentPhrase = currentPhrase.next;\r\n    }\r\n    while (currentChar && currentChar.startTime < position + 200) {\r\n      if (c !== currentChar) {\r\n        c = currentChar;\r\n        currentChar.animate = placeChar();\r\n        console.log(\"Placed char\" + currentChar + \"-\" + countChar + \"-\" + c);\r\n        countChar++;\r\n      }\r\n      currentChar = currentChar.next;\r\n    }\r\n  },\r\n\r\n  onTimerReady: () => {},\r\n});\r\n\r\n$(\"#play\").click(() => {\r\n  //play button\r\n  if (player) {\r\n    if (player.isPlaying) {\r\n      player.requestPause();\r\n      $(\"#play\").html(\"PLAY\");\r\n      ``;\r\n    } else {\r\n      player.requestPlay();\r\n      $(\"#play\").html(\"PAUSE\");\r\n    }\r\n  }\r\n});\r\n\r\n// $(\"#stop\").click(() => {\r\n//   //stop button\r\n//   if (player) {\r\n//     player.requestStop();\r\n//   }\r\n// });\r\n\r\nfunction placePhraseDiv() {\r\n  let contents = '<div id=\"phrase' + (countPhrase + 1) + '\">';\r\n  contents += \"</div></br>\";\r\n  $(\"#contents\").append(contents);\r\n}\r\nfunction placeChar() {\r\n  const appendID = \"#phrase\" + countPhrase;\r\n  $(appendID).append(c.text);\r\n  // console.log(c.text);\r\n  // $(\"#phrase\" + countPhrase + \"ok\").append(c);\r\n}\r\n"]}